/*
작성자 : 이상수
일시 : 2021.03.07
제목 : 겉넓이 구하기 - 16931
풀이 : 구현문제
       어떤 도형이 있을 때 겉으로 드러나는 부분의 겉넓이를 구한다는 것은
	   외북적으로 보이는 부분의 넓이를 더한다는 것과 같다.

	   정육면체를 바라보는 시각에 따라 넓이를 계산하여 더해주면 된다.

	   1. 정면
	   2. 후면
	   3. 좌측
	   4. 우측
	   5. 상단
	   6. 하단

	   상단과 하단의 경우 바라볼때 1차원적으로 깔려서 보이기 때문에
	   블럭이 채워져 있다면 넓이를 1로 보고 추가해주면 된다.

	   정면, 후면, 좌측, 우측의 경우
	   단계적으로 접근하여 계산을 하게되면
	   우선 바라보는 시선에서 가장 처음 마주하게 되는 도형의 크기만큼 더해주고
	   그 뒤로는 이 전에 확인한 도형보다 높이가 더 높은 블럭이 있을 때
	   그 차이만큼 더해주면 된다.
	   예를 들어 3 2 3 으로 놓여진 블럭들을 좌측에서 본다면
	   우선 3을 더해주고 2는 3보다 작기 때문에 좌측에서 봤을 때 드러나는 부분이 없다.
	   하지만 2 다음 3이 오게 되면 3과 3 사이에 공간이 생기기 때문에
	   2번째 3의 좌측 면적은 드러나게 된다.
	   이와 같이 차이가 있으며 바라보는 시선에서 뒤에있는 블럭이 더 높다면
	   값을 더해주면 된다.

	   이를 더 간단하게 처리하자고 하면
	   각 시선에 대해 처음 값을 0이라 두고 앞과 뒤의 차이가 음수가 아닐때
	   모두 더하게 하면 조금 더 간결한 코드가 나올것 같기도 하다.
*/
#include<iostream>

using namespace std;

int n, m;
int arr[101][101];

int main() {
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> arr[i][j];

	int ans = 0;

	// 정면
	for (int j = 0; j < m; j++) {
		ans += arr[n - 1][j];
		for (int i = n - 2; i >= 0; i--) {
			if (arr[i][j] > arr[i + 1][j]) {
				ans += (arr[i][j] - arr[i + 1][j]);
			}
		}
	}

	// 후면
	for (int j = 0; j < m; j++) {
		ans += arr[0][j];
		for (int i = 1; i < n; i++) {
			if (arr[i][j] > arr[i - 1][j]) {
				ans += (arr[i][j] - arr[i - 1][j]);
			}
		}
	}

	// 좌측
	for (int i = 0; i < n; i++) {
		ans += arr[i][0];
		for (int j = 1; j < m; j++) {
			if (arr[i][j] > arr[i][j - 1]) {
				ans += (arr[i][j] - arr[i][j - 1]);
			}
		}
	}

	// 우측
	for (int i = 0; i < n; i++) {
		ans += arr[i][m - 1];
		for (int j = m-2; j >= 0; j--) {
			if (arr[i][j] > arr[i][j + 1]) {
				ans += (arr[i][j] - arr[i][j + 1]);
			}
		}
	}

	// 상단, 하단
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (arr[i][j] != 0) ans += (2 * 1);

	cout << ans;
}