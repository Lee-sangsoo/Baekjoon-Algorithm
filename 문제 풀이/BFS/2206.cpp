/*
작성자 : 이상수
일시 : 2021.03.21
제목 : 벽 부수고 이동하기 - 2206
풀이 : BFS문제를 사용하는 문제
	   하지만, 일반적인 BFS와 달리 벽을 가지 못하는곳을 갈 수 있다는 조건이 걸리기 때문에
	   이에 맞는 큐에 넣어줄때의 조건문 추가가 필요하다.

	   아래 주석과 같이 
	   큐의 구조와 chk의 구조가 다르며
	   벽을 부쉈는지 부수지 않았는지 벽인지 빈공간인지의 조합에 따라
	   그 조건문이 달라진다.
*/
#include<iostream>
#include<queue>
#include<string>

using namespace std;

int n, m;
int arr[1001][1001];
bool chk[1001][1001][2];

int dx[4] = { -1, 0, 1, 0 };
int dy[4] = { 0, 1, 0, -1 };

int bfs() {
	queue<pair<pair<int, int>, pair<int, int>>> q;
	int ans = -1;
	q.push({ {0, 0},{0, 1} });
	chk[0][0][0] = true;

	while (!q.empty()) {
		int x = q.front().first.first; // 현재 x 좌표
		int y = q.front().first.second; // 현재 y좌표
		int b = q.front().second.first; // 현재 블럭을 부순 횟수
		int cnt = q.front().second.second; // 현재 이동한 칸의 수
		q.pop();
		if (x == n - 1 && y == m - 1) return cnt; // (n, m)에 도달했다면 종료
												  // 이동한 칸의 수를 return
		// 다음으로 이동하는 칸이 벽인데 이미 벽을 부쉈다 -> 큐에 넣지 않는다
		// 다음으로 이동하는 칸이 벽인데 벽을 부술수있다 -> 벽을 부쉈다고 처리하고 큐에 넣는다
		// 다음으로 이동하는 칸이 빈공간인데 벽을 한번 부쉈다 
		//		-> 다음칸이 벽을 부수고 방문한적이 있는지 확인 후 아니라면 큐에 넣는다
		// 다음으로 이동하는 칸이 빈공간인데 벽을 부수지 않았다 
		//		-> 다음칸이 벽을 부수지 않고 방문한적이 있는지 확인 후 아니라면 큐에 넣는다.

		// 빈공간 방문시의 설명
		//	: 이미 벽을 부쉈다면 더이상 부수지 못하기 때문에 chk[nx][ny][부숨] 이 이미 방문을 했다면
		//	  다른 곳에서 방문을 했다는 뜻이 되기 때문에 가지 않도록한다.
		//	: 벽을 부순적이 없다면 마찬가지로 빈공간에서는 더이상 벽을 부수지 않아도 되기 때문에
		//	  같은 b에 대해서만 진행한다.
		for (int k = 0; k < 4; k++) {
			int nx = x + dx[k];
			int ny = y + dy[k];
			if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			if (arr[nx][ny] == 1 && b == 0) { // 이동하려는 칸이 벽이고 벽을 부순적이 없다면
				chk[nx][ny][b + 1] = true; // 벽을 부수고 해당칸으로 이동했다는 표시를 남기고
				q.push({ {nx, ny},{b + 1, cnt + 1} }); // 큐에 해당 값 넣어주기 (벽은 부쉈다고 남김)
			}
			else if (arr[nx][ny] == 0 && chk[nx][ny][b] == false) { // 이동하려는 칸이 빈공간이고 방문한적이 없다면
				chk[nx][ny][b] = true;
				q.push({ {nx, ny},{b, cnt + 1} });
			}
		}
	}

	return -1;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(NULL);

	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		for (int j = 0; j < m; j++)
			arr[i][j] = s[j] - '0';
	}

	int ans;
	ans = bfs();
	cout << ans;
}



/*
1. BFS를 통해서 쉽게 해결할 수 있는 문제이다. 먼저 본인은 Queue에서 4가지 변수를 관리해주었다.

  { {x, y}, {벽 부순 횟수, 현재 칸수} } 이렇게 총 4가지 변수들에 대해서 관리해주었다.



2. 일반적인 BFS를 실행시키되, 벽을 부쉈는지 안부쉈는지에 대해서만 따로 확인을 해주면 되기 때문에

   탐색한 정점을 나타내는 Visit함수를 3차원 배열을 이용해서 나타내었다.

   Visit[x][y][벽을부순횟수] 이렇게 표현하였다.

   이미 방문한 정점이더라도, 벽을 부수고 왔는지, 벽을 부수지 않고 왔는지는 서로 다른 경로가 되기 때문에 저렇게 표현

   하였다.



3. BFS안에서 이동할 다음칸에 대해서도 조건을 하나 더 생각해 주어야 한다.

  1. 만약 이동하려는 다음 칸이 벽이고, 이미 벽을 한번 부셨다면?

	 → 더이상 진행할 수 없다. 따라서 Queue에 넣어주지 않는다.

  2. 만약 이동하려는 다음 칸이 벽이고, 벽을 아직 부수지 않았다면?

	 → 벽을 부쉈다는 표시를 해주고, Queue에 넣어서 다음 단계를 진행한다.

  3. 만약 이동하려는 다음 칸이 빈 칸이고, 벽을 한번 부수고 방문한다면?

	 → 벽을 한번 부수고 방문한 정점인지 확인해주고, 아니라면 Queue에 넣어서 다음 단계를 진행한다.

  4. 만약 이동하려는 다음 칸이 빈 칸이고, 벽을 부수지 않고 방문한다면?

	 → 벽을 부수지 않고 방문한 정점인지 확인해주고, 아니라면 Queue에 넣어서 다음 단계를 진행한다.



  생각해야될 게 4가지나 되는 것 처럼 보이지만, 실제로 구현해보면 그렇지 않다.

  정확한 내용은 코드를 참고하자.



출처: https://yabmoons.tistory.com/73 [얍문's Coding World..]
*/