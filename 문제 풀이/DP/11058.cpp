/*
작성자 : 이광민
일시 : 2021.05.28
제목 : 11058 - 크리보드
풀이 : 탑 다운 방식의 문제로 풀어보려 했으나 바텀 업 방식이 훨 쉬워서 바꿔 푼 문제
       현재 저장된 문자에 추가로 한개를 늘리는 것은 정말 간단하다
	   하지만, 현재 값을 복붙한 경우나 클립보드에 있는것을 계속해서 붙여넣기 해온 경우는 어떻게 처리하는가 하는 부분이 좀 어려웠다.

	   해법은 다음과 같다.
	   1. A를 하나 누른 경우 => D[i] = D[i - 1] + 1
	   2. 선택 + 복사 + 붙여넣기 한 경우 => D[i] = D[i - 3] * 2
	   3. 선택 + 복사 + 붙여넣기 + 붙여넣기 (복사 후 2번 연속 붙여 넣은 경우) => D[i] = D[i - 4] * 3
	   4. 선택 + 복사 + 붙여넣기 + 붙여넣기 + 붙여넣기 (복사 후 3번 연속 붙여 넣은 경우) => D[i] = D[i - 5] * 4
	   5. ....

	   즉 복사 붙여넣기의 점화식은 다음과 같이 정리된다.
	   D[i] = D[i - j] * (j - 1)
	   -> N번 붙여 넣었다 라는 말은 똑같은 문자열이 N+1번 반복된다는 말이다.
	   -> N번 붙여 넣었다 라는 말은 (N - 1번 붙여넣는 과정 + <선택 + 복사 + 붙여넣기> 과정)이다.

	   => N번 복붙 == (N + 2) 전의 값을 N번 반복하는 것이다.
	   => 3개전 값을 1번 붙여 넣었다 -> D[i - 3] * 2 (D배열은 A의 갯수를 저장하는 배열이기 때문)
										ㄴ 3번 전의 A 갯수를 2배한 값 == 3번 전의 A들을 복사하여 붙여넣은 값
*/
#include <iostream>
#include <algorithm>

using namespace std;

int n;
long long d[101];

int main() {
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	cin >> n;
	d[0] = 0; 
	d[1] = 1;
	d[2] = 2;
	d[3] = 3;
	for (int i = 4; i <= n; i++) {
		d[i] = max(d[i], d[i - 1] + 1);
		for(int j = 3; j<=i; j++)
			d[i] = max(d[i], d[i - j] * (j-1));
	}
	cout << d[n];
}